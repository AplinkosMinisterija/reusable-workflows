# This workflow helps ensure that the code of the action we're going to deploy:
# 1. Is well-formated
# 2. Is linted
# 3. Successfully builds
# 4. Passes unit-tests
# Additionally node packages used by the action can be audited.
# Based on https://github.com/actions/reusable-workflows/blob/main/.github/workflows/basic-validation.yml

name: Validate node application

on:
  workflow_call:
    inputs:
      runs-on:
        description: "Optional input to set an operating systems which the workflow uses. Defaults to ubuntu-latest if not set"
        required: false
        type: string
        default: "ubuntu-latest"
      working-directory:
        description: "Optional input to set working directory"
        required: false
        type: string
        default: "."
      audit-level:
        description: "Optional input to set NPM audit level. Defaults to high if not set"
        required: false
        type: string
        default: "high"
      enable-linter:
        description: "Optional input to enable linter"
        required: false
        type: boolean
        default: true
      package-manager:
        description: "Optional input to set package manager. Supported values: npm, yarn. Defaults to npm."
        required: false
        type: string
        default: "npm"
      node-version:
        description: "Optional input to set the version of Node.js used to build the project. The input syntax corresponds to the setup-node's one"
        required: false
        type: string
        default: "16.x"
      node-version-file:
        description: "Optional input set File containing the version Spec of the version to use.  Examples: .nvmrc, .node-version, .tool-versions."
        required: false
        type: string
        default: ""
      node-caching:
        description: "Optional input to set up caching. The input syntax corresponds to the setup-node's one."
        required: false
        type: boolean
        default: true
      cache-dependency-path:
        description: 'Optional input to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.'
        required: false
        type: string
        default: ""
      postgres-image:
        description: 'Optional input to specify postgres image. Defaults to postgres:15 if not set.'
        required: false
        type: string
        default: postgres:15
      postgres-port:
        description: 'Optional input to specify postgres port on the Docker host. Defaults to 5432 if not set.'
        required: false
        type: number
        default: 5432
      postgres-user:
        description: 'Optional input to specify postgres user. Defaults to postgres if not set.'
        required: false
        type: string
        default: postgres
      postgres-password:
        description: 'Optional input to specify postgres password. Defaults to postgres if not set.'
        required: false
        type: string
        default: postgres
      postgres-db:
        description: 'Optional input to specify postgres DB. Defaults to postgres if not set.'
        required: false
        type: string
        default: postgres
      redis-port:
        description: 'Optional input to specify redis port on the Docker host. Defaults to 6379 if not set.'
        required: false
        type: number
        default: 6379

jobs:
  validate:
    name: Validate node application
    runs-on: ${{inputs.runs-on}}
    defaults:
      run:
        working-directory: ${{inputs.working-directory}}

    services:
      postgres:
        image: ${{inputs.postgres-image}}
        ports: [ '${{inputs.postgres-port}}:5432' ]
        env:
          POSTGRES_HOST: localhost
          POSTGRES_USER: ${{inputs.postgres-user}}
          POSTGRES_PASSWORD: ${{inputs.postgres-password}}
          POSTGRES_DB: ${{inputs.postgres-db}}
          POSTGRES_PORT: 5432
          TZ: 'Etc/GMT'
          PGTZ: 'Etc/GMT'
        options: >-
          --health-cmd pg_isready
          --health-interval 2s
          --health-timeout 2s
          --health-retries 30

      redis:
        image: redis:7
        ports: [ '${{inputs.redis-port}}:6379' ]
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 2s
          --health-timeout 2s
          --health-retries 30

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js ${{inputs.node-version}}
        uses: actions/setup-node@v3
        with:
          node-version: ${{inputs.node-version}}
          node-version-file: ${{inputs.node-version-file}}
          cache-dependency-path: ${{inputs.cache-dependency-path}}
          cache: ${{ inputs.node-caching == true && inputs.package-manager || '' }}

      - name: Install npm dependencies
        if: ${{ inputs.package-manager == 'npm' }}
        run: npm ci --ignore-scripts

      - name: Install yarn dependencies
        if: ${{ inputs.package-manager == 'yarn' }}
        run: yarn install --immutable --immutable-cache --check-cache

      - name: Build
        run: ${{ inputs.package-manager }} run build

      - name: Test
        run: ${{ inputs.package-manager }} test

      - name: Audit packages
        run: ${{ inputs.package-manager }} audit --audit-level=${{inputs.audit-level}}

  eslint:
    name: Run eslint scanning
    runs-on: ${{ inputs.runs-on }}
    if: ${{ inputs.enable-linter }}
    defaults:
      run:
        working-directory: ${{inputs.working-directory}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install ESLint
        run: |
          npm install eslint@8.10.0
          npm install @microsoft/eslint-formatter-sarif@2.1.7

      - name: Run ESLint
        run: npx eslint .
          --config .eslintrc.js
          --ext .js,.jsx,.ts,.tsx
          --format @microsoft/eslint-formatter-sarif
          --output-file eslint-results.sarif
        continue-on-error: true

      - run: ls -la

      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: eslint-results.sarif
          category: eslint
          checkout_path: ${{ github.workspace }}/${{ inputs.working-directory }}

  checkov-scan:
    runs-on: ${{inputs.runs-on}}
    name: Checkov checks
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Checkov check
        uses: bridgecrewio/checkov-action@v12
        with:
          # This will add both a CLI output to the console and create a results.sarif file
          output_format: cli,sarif
          output_file_path: console,results.sarif
          soft_fail: true
          quiet: true # optional: display only failed checks

          skip_check: CKV2_GHA_1

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2

        # Results are generated only on a success or failure
        # this is required since GitHub by default won't run the next step
        # when the previous one has failed. Security checks that do not pass will 'fail'.
        # An alternative is to add `continue-on-error: true` to the previous step
        # Or 'soft_fail: true' to checkov.
        if: success() || failure()
        with:
          sarif_file: results.sarif
          wait-for-processing: true
          category: checkov
