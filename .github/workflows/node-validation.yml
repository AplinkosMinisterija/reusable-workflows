# This workflow helps ensure that the code of the action we're going to deploy:
# 1. Is well-formated
# 2. Is linted
# 3. Successfully builds
# 4. Passes unit-tests
# Additionally node packages used by the action can be audited.
# Based on https://github.com/actions/reusable-workflows/blob/main/.github/workflows/basic-validation.yml

name: Validate node application

on:
  workflow_call:
    inputs:
      runs-on:
        description: "Optional input to set an operating systems which the workflow uses. Defaults to ubuntu-latest if not set"
        required: false
        type: string
        default: "ubuntu-latest"
      working-directory:
        description: "Optional input to set working directory"
        required: false
        type: string
        default: "."
      enable-audit:
        description: "Optional input to enable npm package audit process"
        required: false
        type: boolean
        default: true
      enable-linter:
        description: "Optional input to enable linter"
        required: false
        type: boolean
        default: true
      node-version:
        description: "Optional input to set the version of Node.js used to build the project. The input syntax corresponds to the setup-node's one"
        required: false
        type: string
        default: "16.x"
      node-caching:
        description: "Optional input to set up caching for the setup-node action. The input syntax corresponds to the setup-node's one. Set to an empty string if caching isn't needed"
        required: false
        type: string
        default: "npm"
      cache-dependency-path:
        description: 'Optional input to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.'
        required: false
        type: string
        default: ""
      postgres-port:
        description: 'Optional input to specify postgres port on the Docker host. Defaults to 5432 if not set.'
        required: false
        type: number
        default: 5432
      postgres-user:
        description: 'Optional input to specify postgres user. Defaults to postgres if not set.'
        required: false
        type: string
        default: postgres
      postgres-password:
        description: 'Optional input to specify postgres password. Defaults to postgres if not set.'
        required: false
        type: string
        default: postgres
      postgres-db:
        description: 'Optional input to specify postgres DB. Defaults to postgres if not set.'
        required: false
        type: string
        default: postgres
      redis-port:
        description: 'Optional input to specify redis port on the Docker host. Defaults to 6379 if not set.'
        required: false
        type: number
        default: 6379

jobs:
  validate:
    name: Validate node application
    runs-on: ${{inputs.runs-on}}
    defaults:
      run:
        working-directory: ${{inputs.working-directory}}

    services:
      postgres:
        image: postgres:15
        ports: [ '${{inputs.postgres-port}}:5432' ]
        env:
          POSTGRES_HOST: localhost
          POSTGRES_USER: ${{inputs.postgres-user}}
          POSTGRES_PASSWORD: ${{inputs.postgres-password}}
          POSTGRES_DB: ${{inputs.postgres-db}}
          POSTGRES_PORT: 5432
          TZ: 'Etc/GMT'
          PGTZ: 'Etc/GMT'
        options: >-
          --health-cmd pg_isready
          --health-interval 2s
          --health-timeout 2s
          --health-retries 30

      redis:
        image: redis:7
        ports: [ '${{inputs.redis-port}}:6379' ]
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 2s
          --health-timeout 2s
          --health-retries 30

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js ${{inputs.node-version}}
        uses: actions/setup-node@v3
        with:
          node-version: ${{inputs.node-version}}
          cache-dependency-path: ${{inputs.cache-dependency-path}}
          cache: ${{inputs.node-caching}}

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Run linter
        run: npm run lint
        if: ${{inputs.enable-linter}}

      - name: Build
        run: npm run build

      - name: Test
        run: npm test

      - name: Audit packages
        run: npm audit --audit-level=high
        if: ${{inputs.enable-audit}}